#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


//  0  1  2  3  4       5  6  7  8  9
// 10 11 12 13 14      15 16 17 18 19
// 20 21 22 23 24      25 26 27 28 29
//       30 31 32      33 34 35
#define LEFT_KEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define LEFT_THUMBS 30 31 32
#define RIGHT_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define RIGHT_THUMBS 33 34 35

#define ALP 0
#define NAV 1
#define SYM 2
#define SYS 3
#define NUM 4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        sys_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM Left";
            #binding-cells = <2>;
            flavor = "balanced"; //produces a "hold" if another key is both pressed and released within the tapping-term.
            require-prior-idle-ms = <150>; // immediately resolves a HRM as "tap" when it is pressed shortly after another key has been tapped.
            tapping-term-ms = <280>; //how long a key must be pressed to trigger the "hold" behavior
            quick-tap-ms = <175>; //If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <RIGHT_KEYS RIGHT_THUMBS>; // List of keys on the right side of the keyboard
            hold-trigger-on-release; //delays the positional-hold-tap decision until the next key's release. With this, mods can be combined when held
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM Right";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <LEFT_KEYS LEFT_THUMBS>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha_layer {
            bindings = <
&kp Q          &kp W        &kp F            &kp P                 &kp G                    &kp J          &kp L                  &kp U          &kp Y          &kp SEMI
&hml LGUI A    &hml LALT R  &hml LCTRL S    &hml LSHIFT T          &kp D                    &kp H          &hmr LSHIFT N          &hmr LCTRL E   &hmr LALT I    &hmr LGUI O
&kp Z          &kp X        &kp C            &kp V                 &kp B                    &kp K          &kp M                  &kp COMMA      &kp DOT        &kp FSLH
                            &kp BACKSPACE    &lt NAV ESC           &kp SPACE                &kp ENTER      &lt SYM TAB            &kp DEL
            >;
        };

        nav_layer {
            bindings = <
&kp LC(Q)     &kp LC(W)     &kp LC(F)        &kp LC(P)             &kp LC(G)                &kp PG_UP      &kp HOME               &kp UP          &kp END           &kp LC(SEMI)
&kp LGUI      &sk LALT      &sk LCTRL        &sk LSHIFT            &kp LC(D)                &kp PG_DN      &kp LEFT               &kp DOWN        &kp RIGHT         &kp LC(O)
&kp LC(Z)     &kp LC(X)     &kp LC(C)        &kp LC(V)             &kp LC(B)                &kp LC(K)      &kt LC(M)              &kp LC(COMMA)   &kp LC(PERIOD)    &kp LC(SLASH)
                            &trans           &trans                &trans                   &trans         &trans                 &trans
            >;
        };

        symb_layer {
            bindings = <
&kp EXCL      &kp AT        &kp HASH         &kp DOLLAR            &kp PERCENT              &kp CARET      &kp AMPERSAND          &kp ASTERISK    &kp LPAR          &kp RPAR
&kp PLUS      &kp EQUAL     &kp MINUS        &kp UNDER             &kp LBRC                 &kp RBRC       &sk LSHIFT             &sk LCTRL       &sk LALT          &kp LGUI
&kp PIPE      &kp GRAVE     &caps_word       &kp LEFT_PARENTHESIS  &kp LBKT                 &kp RBKT       &kp RIGHT_PARENTHESIS  &trans          &kp TILDE         &kp BACKSLASH
                            &trans           &trans                &trans                   &trans         &trans                 &trans
            >;
        };

        sys_layer {
            bindings = <
&none         &none          &none           &none                 &none                    &none          &none                  &none            &none            &none
&bt BT_CLR    &bt BT_CLR_ALL &none           &none                 &none                    &none          &none                  &none            &none            &none
&sys_reset    &bootloader    &none           &none                 &none                    &none          &none                  &soft_off        &bootloader      &sys_reset
                             &none           &none                 &none                    &none          &none                  &none
            >;
        };

//         sys_layer {
//             bindings = <
// &bt BT_SEL 0  &bt BT_SEL 1   &bt BT_SEL 2    &none                 &none                    &out OUT_USB   &out OUT_BLE           &none            &none            &none
// &bt BT_CLR    &bt BT_CLR_ALL &none           &none                 &none                    &none          &none                  &none            &none            &none
// &sys_reset    &bootloader    &none           &none                 &none                    &none          &none                  &soft_off        &bootloader      &sys_reset
//                              &none           &none                 &none                    &none          &none                  &none
//             >;
//         };
    };
};
